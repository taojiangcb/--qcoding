{
  "import Constants":{
    "prefix":"importConstants",
    "body":[
      "import * as $1Constants from './constants$2';$0"
    ],
    "description":"导入常量Constants文件"
  },

  "import actions":{
    "prefix":"importActions",
    "body":[
      "import * as $1actions from './actions$2';$0"
    ],
    "description":"导入常量Actions文件"
  },
  "import sagas":{
    "prefix":"importSagas",
    "body":[
      "import { put, call,takeLatest } from 'redux-saga/effects';"
    ],
    "description":"导入sagas"
  },
  
  "import createReducer":{
    "prefix":"cuzCreateReducer",
    "body":[
      "import { createReducer } from 'cuz'"
    ],
    "description":"导入cuz的createReducer"
  },

  "import createAction":{
    "prefix":"cuzCreateAction",
    "body":[
      "import { createAction } from 'cuz'"
    ],
    "description":"导入cuz的createAction"
  },
 
  "create constants": {
    "prefix": "CC3",
    "body":[
      "export const $1 = '🌎 $0'",
      "export const $1_SUCCESS = '☘️ $0'",
      "export const $1_ERROR = '❌ $0'"
    ],
    "description":"constant 常量模版"
  },

  "create actions": {
    "prefix": "CA3",
    "body":[
      "export const $1 = createAction($2)$0",
      "export const $1Success = createAction($2_SUCCESS)$0",
      "export const $1Error = createAction($2_ERROR)$0"
    ],
    "description":"actions 常量模版"
  },

  "init reducers":{
    "prefix": "initReducers",
    "body":[
      "import { createReducer } from 'cuz';",
      "import { fromJS } from 'immutable';",
      "import * as $1Constants from './constants$2';",

      "const initState = fromJS({",
      " $3",
      "});",

      "export default createReducer(initState, {",
      " $0",
      "})"
    ],
    "description":"创建一个REDUCER"
  },

  "add reducer function": {
    "prefix": "addReducerFun",
    "body":[
      "[$1](state, action) {",
      " $2",
      "},",
      "$0"
    ],
    "description":"在Reducer里添加一个处理方法"
  },

  "add saga post function":{
    "prefix":"sagaPost",
    "body":[
      "export function* $1() {",
      " yield takeLatest($2, function* (action) {",
      "   const res = yield call(request.post, $3, {data: action.payload, credentials: 'include' $4});",
      "   //成功",
      "   if (!res.err) {",
      "     $5",
      "     yield put(actions.$1Success(res.data.retValue))",
      "   }",
      "   //异常",
      "   else {",
      "     $0",
      "     yield put(actions.$1Error(res.err))",
      "   }",
      " });",
      "}"
    ],
    "description":"创建一个sagas post function"
  },

  "add saga get function":{
    "prefix":"sagaGet",
    "body":[
      "export function* $1() {",
      " yield takeLatest($2, function* (action) {",
      "   const res = yield call(request.get, $3, {credentials: 'include'$4});",
      "   //成功",
      "   if (!res.err) {",
      "     $5",
      "     yield put(actions.$1Success(res.data.retValue))",
      "   }",
      "   //异常",
      "   else {",
      "     $0",
      "     yield put(actions.$1Error(res.err))",
      "   }",
      " });",
      "}"
    ],
    "description":"创建一个sagas get function"
  }
}